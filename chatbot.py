from typing import Dict, List, Optional, TypedDict, Annotated
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_community.tools import TavilySearchResults
from langchain.schema import BaseMessage
import operator
from langchain_core.utils.json import parse_json_markdown

# State definition
class AgentState(TypedDict):
    messages: Annotated[List[BaseMessage], operator.add]
    event_info: Dict
    speaker_info: Dict
    analysis_complete: bool
    current_step: str
    audience_analysis: Dict
    final_recommendation: str
    waiting_for_input: bool

class InteractiveSpeakerPrepAgent:
    def __init__(self, gemini_model="gemini-2.0-flash-lite"):
        self.llm = ChatGoogleGenerativeAI(model=gemini_model, temperature=0.7)
        self.search_tool = TavilySearchResults(max_results=5)
        self.state = self._initialize_state()
        self.conversation_steps = [
            "greeting",
            "process_greeting_response",
            "search_event",
            "ask_goal",
            "clarify_goal",
            "ask_stage",
            "analyze_audience",
            "process_audience_feedback",
            "assess_knowledge", 
            "process_knowledge_feedback", 
            "generate_recommendation"
        ]
        self.current_step_index = 0
    
    def _initialize_state(self):
        return {
            "messages": [],
            "event_info": {},
            "speaker_info": {},
            "analysis_complete": False,
            "current_step": "greeting",
            "audience_analysis": {},
            "final_recommendation": "",
            "waiting_for_input": False,
            "audience_approved": False,
            "audience_modification_count": 0,
            "knowledge_approved": False,
            "knowledge_modification_count": 0,
            "knowledge_assessment": {},
        }
        
    def start_conversation(self):
        """Start the interactive conversation"""
        print("üé§ –ê–≥–µ–Ω—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –≤–∏—Å—Ç—É–ø—É")
        print("=" * 50)
        
        # Initial state
        self.state = self._initialize_state()
        self.current_step_index = 0
        
        # Send greeting
        response = self._execute_step("greeting")
        self._display_agent_message(response)
        
        # Start interactive loop
        self._interactive_loop()
    
    def _interactive_loop(self):
        """Main interactive conversation loop"""
        while not self.state["analysis_complete"]:
            try:
                # Get user input
                user_input = input("\nüë§ –í–∏: ").strip()
                
                if user_input.lower() in ['quit', 'exit', '–≤–∏—Ö—ñ–¥', '—Å—Ç–æ–ø']:
                    print("\nüîö –†–æ–∑–º–æ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                
                if user_input.lower() in ['help', '–¥–æ–ø–æ–º–æ–≥–∞']:
                    self._show_help()
                    continue
                
                if not user_input:
                    print("‚ö†Ô∏è  –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
                    continue
                
                # Process user input
                self._process_user_input(user_input)
                
            except KeyboardInterrupt:
                print("\n\nüîö –†–æ–∑–º–æ–≤—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                print("–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å 'help' –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.")
    
    def _process_user_input(self, user_input: str):
        """Process user input and generate next response"""
        # Add user message to state
        self.state["messages"].append(HumanMessage(content=user_input))
        
        current_step_name = None
        if self.current_step_index < len(self.conversation_steps):
            current_step_name = self.conversation_steps[self.current_step_index]
        
        # Special handling for feedback steps
        if current_step_name == "process_audience_feedback":
            # Execute audience feedback processing
            response = self._execute_step("process_audience_feedback")
            
            if response:
                self._display_agent_message(response)
            
            # Check if we should continue or stay in feedback loop
            if not self.state.get("audience_approved", False):
                return  # Stay in the same step for more feedback
            else:
                self.current_step_index += 1  # Move to next step
                
        elif current_step_name == "process_knowledge_feedback":
            # Execute knowledge feedback processing
            response = self._execute_step("process_knowledge_feedback")
            
            if response:
                self._display_agent_message(response)
            
            # Check if we should continue or stay in feedback loop
            if not self.state.get("knowledge_approved", False):
                return  # Stay in the same step for more feedback
            else:
                self.current_step_index += 1  # Move to next step
        else:
            # Normal step progression
            self.current_step_index += 1
        
        # Continue with normal flow
        if self.current_step_index < len(self.conversation_steps):
            current_step = self.conversation_steps[self.current_step_index]
            self.state["current_step"] = current_step
            
            # Execute current step
            response = self._execute_step(current_step)
            
            if response:
                self._display_agent_message(response)
        else:
            # Conversation completed
            self.state["analysis_complete"] = True
            if self.state.get("final_recommendation"):
                print("\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                self._show_summary()
            else:
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")


    
    def _execute_step(self, step: str) -> Optional[str]:
        """Execute a conversation step"""
        if step == "greeting":
            return "–ü—Ä–∏–≤—ñ—Ç! –ì–æ—Ç—É—î—à—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É?"
        
        elif step == "process_greeting_response":
            return self._process_greeting_response()
            
        elif step == "search_event":
            return self._search_event_info()
            
        elif step == "ask_goal":
            return self._ask_goal()
            
        elif step == "clarify_goal":
            return self._clarify_goal()
            
        elif step == "ask_stage":
            return self._ask_stage()
            
        elif step == "analyze_audience":
            return self._analyze_audience()
        
        elif step == "process_audience_feedback":
            return self._process_audience_feedback()
            
        elif step == "assess_knowledge":
            return self._assess_knowledge()
        
        elif step == "process_knowledge_feedback":
            return self._process_knowledge_feedback()
            
        elif step == "generate_recommendation":
            return self._generate_recommendation()
            
        return None
    
    def _process_greeting_response(self) -> Optional[str]:
        """Process user's response to greeting and decide next action"""
        last_message = self.state["messages"][-1]
        user_response = last_message.content.lower().strip()
        
        print("\nü§î –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
        
        try:
            # Use LLM to analyze the response
            analysis_prompt = f"""
            –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è "–ì–æ—Ç—É—î—à—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É?": "{user_response}"
            
            –í–∏–∑–Ω–∞—á —á–∏ —Ü–µ:
            - POSITIVE: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ—Ç—É—î—Ç—å—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É (—Ç–∞–∫, –≥–æ—Ç—É—é—Å—è, yes, –∑–≤–∏—á–∞–π–Ω–æ, etc.)
            - NEGATIVE: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –≥–æ—Ç—É—î—Ç—å—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É (–Ω—ñ, –Ω–µ –≥–æ—Ç—É—é—Å—è, no, etc.)  
            - UNCLEAR: –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ –∞–±–æ –ø–æ—Ç—Ä–µ–±—É—î —É—Ç–æ—á–Ω–µ–Ω–Ω—è
            
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –ª–∏—à–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: POSITIVE, NEGATIVE, –∞–±–æ UNCLEAR
            """
            
            response = self.llm.invoke([HumanMessage(content=analysis_prompt)])
            intent = response.content.strip().upper()
            
            if intent == "POSITIVE":
                return "–ö–ª–∞—Å–Ω–æ! –î–µ –±—É–¥–µ—à –≤–∏—Å—Ç—É–ø–∞—Ç–∏? –ù–∞ —è–∫—ñ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó —á–∏ –∑–∞—Ö–æ–¥—ñ?"
            elif intent == "NEGATIVE":
                return self._handle_negative_response()
            else:  # UNCLEAR
                self.current_step_index -= 1
                return "–í–∏–±–∞—á, –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤. –¢–∏ –≥–æ—Ç—É—î—à—Å—è –¥–æ —è–∫–æ–≥–æ—Å—å –≤–∏—Å—Ç—É–ø—É —á–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó? (—Ç–∞–∫/–Ω—ñ)"
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
            # Fallback to simple keyword matching
            positive_keywords = ["—Ç–∞–∫", "yes", "–≥–æ—Ç—É—é—Å—è", "–≥–æ—Ç—É—é", "–¥–∞", "–∑–≤–∏—á–∞–π–Ω–æ", "–∞–≤–∂–µ–∂"]
            negative_keywords = ["–Ω—ñ", "no", "–Ω–µ –≥–æ—Ç—É—é—Å—è", "–Ω–µ –≥–æ—Ç—É—é", "–Ω–µ—Ç"]
            
            if any(keyword in user_response for keyword in positive_keywords):
                return "–ö–ª–∞—Å–Ω–æ! –î–µ –±—É–¥–µ—à –≤–∏—Å—Ç—É–ø–∞—Ç–∏? –ù–∞ —è–∫—ñ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó —á–∏ –∑–∞—Ö–æ–¥—ñ?"
            elif any(keyword in user_response for keyword in negative_keywords):
                return self._handle_negative_response()
            else:
                return "–í–∏–±–∞—á, –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤. –¢–∏ –≥–æ—Ç—É—î—à—Å—è –¥–æ —è–∫–æ–≥–æ—Å—å –≤–∏—Å—Ç—É–ø—É —á–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó? (—Ç–∞–∫/–Ω—ñ)"

    def _handle_negative_response(self) -> str:
        """Handle when user is not preparing for public speaking"""
        self.state["analysis_complete"] = True
        return """
    –ó—Ä–æ–∑—É–º—ñ–ª–æ! –Ø–∫—â–æ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –±—É–¥–µ—à –≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó —á–∏ –±—É–¥—å-—è–∫–æ–≥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è - –∑–≤–µ—Ä—Ç–∞–π—Å—è! 

    –Ø –¥–æ–ø–æ–º–æ–∂—É:
    ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä—ñ—é
    ‚Ä¢ –°—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è  
    ‚Ä¢ –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∏—Å—Ç—É–ø—É
    ‚Ä¢ –î–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø–æ–¥–∞—á—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—É

    –£–¥–∞—á—ñ! üëã
    """

    
    def _search_event_info(self) -> str:
        """Search for event information"""
        last_message = self.state["messages"][-1]
        event_name = last_message.content
        
        print(f"\nüîç –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ {event_name}...")
        
        try:
            # Search for event information
            search_query = f"{event_name} 2025 conference details agenda speakers"
            search_results = self.search_tool.run(search_query)
            
            # Convert search results to string format
            search_text = ""
            if isinstance(search_results, list):
                for result in search_results:
                    if isinstance(result, dict):
                        search_text += f"Title: {result.get('title', '')}\n"
                        search_text += f"Content: {result.get('content', '')}\n"
                        search_text += f"URL: {result.get('url', '')}\n\n"
                    else:
                        search_text += str(result) + "\n\n"
            else:
                search_text = str(search_results)
            
            # Process search results with LLM
            system_prompt = """
            –¢–∏ –¥–æ–ø–æ–º–∞–≥–∞—î—à —Å–ø—ñ–∫–µ—Ä—É –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É. 
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –ø—Ä–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—é —ñ –≤–∏—Ç—è–≥–Ω–∏ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:
            - –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó (event_name)
            - –î–∞—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (dates)
            - –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (place)
            - –¢–µ–º–∞—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó (theme)
            - –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ (attendees)
            - –°—Ç–µ–π–¥–∂—ñ/—Å–µ–∫—Ü—ñ—ó —è–∫—â–æ —î (stages)
            - –¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è (target_audience)
            –Ø–∫—â–æ –¥–ª—è –ø–æ–ª—è –≤—ñ–¥—Å—É—Ç–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - –∑–∞–ø–∏—à–∏ None —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—å–æ–≥–æ –ø–æ–ª—è.
            
            –ü–æ–≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ.
            """
            
            analysis_prompt = f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –ø—Ä–æ {event_name}:\n{search_text}"
            
            response = self.llm.invoke([
                SystemMessage(content=system_prompt),
                HumanMessage(content=analysis_prompt)
            ])
            
            try:
                event_info = parse_json_markdown(response.content)
            except:
                event_info = {
                    "event_name": event_name,
                    "search_results": search_text[:500]
                }
            
            self.state["event_info"] = event_info
            
            # Process search results with LLM to extract and format information
            system_prompt = """
            –¢–∏ –¥–æ–ø–æ–º–∞–≥–∞—î—à —Å–ø—ñ–∫–µ—Ä—É –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É. 
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –ø—Ä–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—é —ñ –≤–∏—Ç—è–≥–Ω–∏ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
            
            –°—Ñ–æ—Ä–º—É–ª—é–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —É –ø—Ä–∏—Ä–æ–¥–Ω–æ–º—É, –¥—Ä—É–∂–Ω—å–æ–º—É —Å—Ç–∏–ª—ñ.
            –í–∫–ª—é—á–∏ –≤—Å—é –∑–Ω–∞–π–¥–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ:
            - –ù–∞–∑–≤—É –ø–æ–¥—ñ—ó
            - –î–∞—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
            - –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
            - –¢–µ–º–∞—Ç–∏–∫—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó
            - –û—á—ñ–∫—É–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤/—É—á–∞—Å–Ω–∏–∫—ñ–≤ (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
            - –¶—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
            - –°—Ç–µ–π–¥–∂—ñ/—Å–µ–∫—Ü—ñ—ó (—è–∫—â–æ —î)
            - –Ü–Ω—à—ñ –≤–∞–∂–ª–∏–≤—ñ –¥–µ—Ç–∞–ª—ñ
            
            –Ø–∫—â–æ —è–∫–∞—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –∑–≥–∞–¥—É–π –ø—Ä–æ –Ω–µ—ó.
            –ó–∞–≤–µ—Ä—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è–º –ø—Ä–æ —Ç–µ–º—É –≤–∏—Å—Ç—É–ø—É.
            
            –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—î –±—É—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω–∏–º —Ç–∞ —Ä–æ–∑–º–æ–≤–Ω–∏–º, –Ω—ñ–±–∏ —Ç–∏ —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î—à –¥—Ä—É–≥—É.
            """
            
            response = self.llm.invoke([
                SystemMessage(content=system_prompt),
                HumanMessage(content=analysis_prompt)
            ])
            
            return response.content
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–¥—ñ—é. –Ø–∫–∞ —Ç–µ–º–∞ —Ç–≤–æ–≥–æ –≤–∏—Å—Ç—É–ø—É?"
    
    def _ask_goal(self) -> str:
        """Ask about speaker's goal"""
        last_message = self.state["messages"][-1]
        topic = last_message.content
        
        speaker_info = self.state.get("speaker_info", {})
        speaker_info["topic"] = topic
        self.state["speaker_info"] = speaker_info
        
        return "–ß–æ–º—É —Ç–∏ –ø–æ–≥–æ–¥–∏–≤—Å—è —Ç–∞–º –≤–∏—Å—Ç—É–ø–∏—Ç–∏? –Ø–∫–∞ —Ç–≤–æ—è –º–µ—Ç–∞?"
    
    def _clarify_goal(self) -> str:
        """Clarify and quantify the speaker's goal"""
        last_message = self.state["messages"][-1]
        goal = last_message.content
        
        speaker_info = self.state.get("speaker_info", {})
        speaker_info["goal"] = goal
        self.state["speaker_info"] = speaker_info
        
        try:
            # Generate clarifying question based on goal
            clarification_prompt = f"""
            –°–ø—ñ–∫–µ—Ä —Ö–æ—á–µ: {goal}
            
            –°—Ñ–æ—Ä–º—É–ª—é–π –ø–∏—Ç–∞–Ω–Ω—è —â–æ–± –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ü—é —Ü—ñ–ª—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è.
            –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –º–µ—Ç–∞ "–∑–∞–ª—É—á–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–æ —à–∫–æ–ª–∏", –∑–∞–ø–∏—Ç–∞–π "—Å–∫—ñ–ª—å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –º–∞—î –ø—Ä–∏–π—Ç–∏ —â–æ–± —Ü—ñ–ª—å –±—É–ª–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞?"
            –î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
            """
            
            response = self.llm.invoke([HumanMessage(content=clarification_prompt)])
            return response.content
            
        except Exception as e:
            return "–Ø–∫ —Ç–∏ –±—É–¥–µ—à —Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ –º–µ—Ç–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞? –Ø–∫—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó —É—Å–ø—ñ—Ö—É?"
    
    def _ask_stage(self) -> str:
        """Ask about specific stage/track if event has multiple"""
        event_info = self.state.get("event_info", {})
        
        # Check if event has multiple stages/tracks
        event_str = str(event_info).lower()
        if any(word in event_str for word in ["—Å—Ç–µ–π–¥–∂", "—Å–µ–∫—Ü—ñ—è", "track", "stage", "–ø–æ—Ç—ñ–∫"]):
            return "–ù–∞ —è–∫—ñ–π —Å–µ–∫—Ü—ñ—ó/—Å—Ç–µ–π–¥–∂—ñ —Ç–∏ –±—É–¥–µ—à –≤–∏—Å—Ç—É–ø–∞—Ç–∏?"
        else:
            # Skip to audience analysis directly
            self.current_step_index += 1  # Skip this step
            return self._analyze_audience()
    
    def _analyze_audience(self) -> str:
        """Analyze the audience based on event and topic"""
        event_info = self.state.get("event_info", {})
        speaker_info = self.state.get("speaker_info", {})
        
        print("\nüîç –ê–Ω–∞–ª—ñ–∑—É—é –∞—É–¥–∏—Ç–æ—Ä—ñ—é...")
        
        try:
            # Search for additional audience information
            search_query = f"{event_info.get('event_name', '')} {speaker_info.get('topic', '')} audience demographics attendees"
            search_results = self.search_tool.run(search_query)
            
            # Convert search results to string format
            search_text = ""
            if isinstance(search_results, list):
                for result in search_results:
                    if isinstance(result, dict):
                        search_text += f"Title: {result.get('title', '')}\n"
                        search_text += f"Content: {result.get('content', '')}\n\n"
                    else:
                        search_text += str(result) + "\n\n"
            else:
                search_text = str(search_results)
            
            # Analyze audience with LLM
            analysis_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—É–¥–∏—Ç–æ—Ä—ñ—é –¥–ª—è –≤–∏—Å—Ç—É–ø—É:
            
            –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è: {event_info.get('event_name', '–ù–µ–≤—ñ–¥–æ–º–∞')}
            –¢–µ–º–∞ –≤–∏—Å—Ç—É–ø—É: {speaker_info.get('topic', '–ù–µ–≤—ñ–¥–æ–º–∞')}
            –ú–µ—Ç–∞ —Å–ø—ñ–∫–µ—Ä–∞: {speaker_info.get('goal', '–ù–µ–≤—ñ–¥–æ–º–∞')}
            –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {search_text[:300]}
            
            –í–∏–∑–Ω–∞—á —Å–µ–≥–º–µ–Ω—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
            """
            
            response = self.llm.invoke([HumanMessage(content=analysis_prompt)])
            
            self.state["audience_analysis"] = {"segments": response.content}
            
            # Create confirmation message
            confirmation = f"""
–ü–æ–¥–∏–≤–∏—Å—å, —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ:

* –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: {event_info.get('dates', '—É—Ç–æ—á–Ω—é—î—Ç—å—Å—è')}
* –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–ª—è–¥–∞—á—ñ–≤: {event_info.get('attendees', '—É—Ç–æ—á–Ω—é—î—Ç—å—Å—è')}
* –¢–µ–º–∞: {speaker_info.get('topic')}
* –¶—ñ–ª—å: {speaker_info.get('goal')}
* –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {response.content}

–ú–æ–∂–ª–∏–≤–æ —â–µ –∫–æ–≥–æ—Å—å –¥–æ–¥–∞—Ç–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó?
            """
            
            return confirmation.strip()
            
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {e}. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–∞–ª—ñ..."
        
    def _process_audience_feedback(self) -> str:
        """Process user feedback about audience segments"""
        last_message = self.state["messages"][-1]
        user_feedback = last_message.content.strip()
        
        print("\nü§î –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –≤—ñ–¥–≥—É–∫...")
        
        # Prevent infinite loops
        if self.state["audience_modification_count"] >= 3:
            self.state["audience_approved"] = True
            return "–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–æ–º –∞—É–¥–∏—Ç–æ—Ä—ñ—ó."
        
        try:
            # Analyze user intent
            intent = self._analyze_user_intent(user_feedback)
            
            if intent == "CONTINUE":
                self.state["audience_approved"] = True
                return "–ß—É–¥–æ–≤–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É."
                
            elif intent == "ADD":
                return self._handle_add_segments(user_feedback)
                
            elif intent == "REMOVE":
                return self._handle_remove_segments(user_feedback)
                
            elif intent == "REWRITE":
                return self._handle_rewrite_segments()
                
            elif intent == "REGENERATE":
                return self._handle_regenerate_segments()
                
            else:
                return self._handle_unclear_feedback()
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–≥—É–∫—É: {e}")
            return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –≤—ñ–¥–≥—É–∫. –ß–∏ –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ –∞–Ω–∞–ª—ñ–∑—ñ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó?"


    def _analyze_user_intent(self, user_feedback: str) -> str:
        """Analyze what user wants to do with audience segments"""
        intent_prompt = f"""
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–∞–≤ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: "{user_feedback}"
        
        –í–∏–∑–Ω–∞—á –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        - CONTINUE: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π —ñ —Ö–æ—á–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ (—Ç–∞–∫, –¥–æ–±—Ä–µ, –∑–≥–æ–¥–µ–Ω, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, etc.)
        - ADD: —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ–¥–∞—Ç–∏, —â–µ —î, —Ç–∞–∫–æ–∂, –≤–∫–ª—é—á–∏—Ç–∏, etc.)
        - REMOVE: —Ö–æ—á–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —â–æ—Å—å (–≤–∏–¥–∞–ª–∏—Ç–∏, –ø—Ä–∏–±—Ä–∞—Ç–∏, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∑–∞–π–≤–µ, etc.)
        - REWRITE: —Ö–æ—á–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∏ —Å–∞–º (—Å–∞–º –Ω–∞–ø–∏—à—É, –ø–æ-—Å–≤–æ—î–º—É, —ñ–Ω–∞–∫—à–µ, etc.)
        - REGENERATE: —Ö–æ—á–µ —â–æ–± –∞–≥–µ–Ω—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞–≤ (–∑–∞–Ω–æ–≤–æ, –ø–æ-–Ω–æ–≤–æ–º—É, —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, etc.)
        - UNCLEAR: –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π –≤—ñ–¥–≥—É–∫
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –ª–∏—à–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: CONTINUE, ADD, REMOVE, REWRITE, REGENERATE, –∞–±–æ UNCLEAR
        """
        
        response = self.llm.invoke([HumanMessage(content=intent_prompt)])
        return response.content.strip().upper()

    def _handle_add_segments(self, user_feedback: str) -> str:
        """Handle adding information to audience segments"""
        self.state["audience_modification_count"] += 1
        
        current_segments = self.state["audience_analysis"].get("segments", "")
        
        update_prompt = f"""
        –ü–æ—Ç–æ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {current_segments}
        
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏: {user_feedback}
        
        –û–Ω–æ–≤—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, –≤–∫–ª—é—á–∏–≤—à–∏ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Å—Ç–∏–ª—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=update_prompt)])
        updated_segments = response.content
        
        self.state["audience_analysis"]["segments"] = updated_segments
        
        return f"""
    –û–Ω–æ–≤–ª–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {updated_segments}

    –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —â–µ —è–∫—ñ—Å—å –∑–º—ñ–Ω–∏?
        """.strip()

    def _handle_remove_segments(self, user_feedback: str) -> str:
        """Handle removing information from audience segments"""
        self.state["audience_modification_count"] += 1
        
        current_segments = self.state["audience_analysis"].get("segments", "")
        
        remove_prompt = f"""
        –ü–æ—Ç–æ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {current_segments}
        
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–¥–∞–ª–∏—Ç–∏/–ø—Ä–∏–±—Ä–∞—Ç–∏: {user_feedback}
        
        –û–Ω–æ–≤—ñ—Ç—å –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, –≤–∏–¥–∞–ª–∏–≤—à–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
        –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Å—Ç–∏–ª—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=remove_prompt)])
        updated_segments = response.content
        
        self.state["audience_analysis"]["segments"] = updated_segments
        
        return f"""
    –û–Ω–æ–≤–ª–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {updated_segments}

    –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —â–µ —è–∫—ñ—Å—å –∑–º—ñ–Ω–∏?
        """.strip()

    def _handle_rewrite_segments(self) -> str:
        """Handle user wanting to write segments themselves"""
        self.state["audience_modification_count"] += 1
        
        return """
    –ó—Ä–æ–∑—É–º—ñ–ª–æ! –û–ø–∏—à—ñ—Ç—å –∞—É–¥–∏—Ç–æ—Ä—ñ—é –≤–∞—à–æ–≥–æ –≤–∏—Å—Ç—É–ø—É —Ç–∞–∫, —è–∫ –≤–∏ —ó—ó –±–∞—á–∏—Ç–µ.
    –í–∫–ª—é—á—ñ—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∏, —ó—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—â–æ.
        """.strip()

    def _handle_regenerate_segments(self) -> str:
        """Handle regenerating audience segments"""
        self.state["audience_modification_count"] += 1
        
        print("\nüîÑ –ì–µ–Ω–µ—Ä—É—é –Ω–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó...")
        
        event_info = self.state.get("event_info", {})
        speaker_info = self.state.get("speaker_info", {})
        
        regenerate_prompt = f"""
        –°—Ç–≤–æ—Ä—ñ—Ç—å –ù–û–í–ò–ô –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∏—Å—Ç—É–ø—É:
        
        –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—è: {event_info.get('event_name', '–ù–µ–≤—ñ–¥–æ–º–∞')}
        –¢–µ–º–∞ –≤–∏—Å—Ç—É–ø—É: {speaker_info.get('topic', '–ù–µ–≤—ñ–¥–æ–º–∞')}
        –ú–µ—Ç–∞ —Å–ø—ñ–∫–µ—Ä–∞: {speaker_info.get('goal', '–ù–µ–≤—ñ–¥–æ–º–∞')}
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó.
        –†–æ–∑–≥–ª—è–Ω—å—Ç–µ —Ä—ñ–∑–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó: –¥–æ—Å–≤—ñ–¥, –ø–æ—Å–∞–¥–∏, —ñ–Ω—Ç–µ—Ä–µ—Å–∏, –º–æ—Ç–∏–≤–∞—Ü—ñ—è —Ç–æ—â–æ.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=regenerate_prompt)])
        new_segments = response.content
        
        self.state["audience_analysis"]["segments"] = new_segments
        
        return f"""
    –ù–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {new_segments}

    –ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Ç–∞–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç?
        """.strip()

    def _handle_unclear_feedback(self) -> str:
        """Handle unclear user feedback"""
        return """
    –ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏. –í–∏ –º–æ–∂–µ—Ç–µ:

    ‚Ä¢ –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: "–¥–æ–¥–∞–π —â–µ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤"
    ‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ —â–æ—Å—å: "–ø—Ä–∏–±–µ—Ä–∏ —á–∞—Å—Ç–∏–Ω—É –ø—Ä–æ..."  
    ‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∞–º–æ–º—É: "—è —Å–∞–º –æ–ø–∏—à—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é"
    ‚Ä¢ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏: "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç"
    ‚Ä¢ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏: "–≤—Å–µ –¥–æ–±—Ä–µ, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ"

    –©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?
        """.strip()

    
    def _assess_knowledge(self) -> str:
        """Assess what audience currently knows about the topic"""
        speaker_info = self.state.get("speaker_info", {})
        audience_analysis = self.state.get("audience_analysis", {})
        
        print("\nüß† –û—Ü—ñ–Ω—é—é –∑–Ω–∞–Ω–Ω—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó...")
        
        try:
            # Generate knowledge assessment
            assessment_prompt = f"""
            –î–ª—è —Ç–µ–º–∏ "{speaker_info.get('topic')}" —Ç–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:
            {audience_analysis.get('segments', '')}
            
            –û–ø–∏—à–∏ —â–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –≤–∂–µ –∑–∞—Ä–∞–∑ –∑–Ω–∞—î –ø—Ä–æ —Ü—é —Ç–µ–º—É, –∞ —â–æ —ó–π —Ç—Ä–µ–±–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏ —Å–ø—ñ–∫–µ—Ä–∞.
            –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥–µ—Ç–∞–ª—å–Ω–æ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ.
            """
            
            response = self.llm.invoke([HumanMessage(content=assessment_prompt)])
            
            # Store the knowledge assessment
            self.state["knowledge_assessment"] = {"content": response.content}
            
            confirmation = f"""
–î–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —è–∫—ñ—Å–Ω–æ–≥–æ —Å–ø—ñ—á–∞ –Ω–∞–º —Ç—Ä–µ–±–∞ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —â–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –≤–∂–µ –∑–∞—Ä–∞–∑ –∑–Ω–∞—î –ø—Ä–æ –∑–∞—è–≤–ª–µ–Ω—É —Ç–µ–º—É.

–ù–∞ –º–æ—é –¥—É–º–∫—É –∑–∞—Ä–∞–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—è —Ç–≤–æ–≥–æ –≤–∏—Å—Ç—É–ø—É:
{response.content}

–¢–∏ –∑–≥–æ–¥–µ–Ω –∑ —Ü—ñ—î—é –æ—Ü—ñ–Ω–∫–æ—é –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó?
            """
            
            return confirmation.strip()
            
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ü—ñ–Ω—Ü—ñ –∑–Ω–∞–Ω—å: {e}. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥–∞–ª—ñ..."
        
    def _process_knowledge_feedback(self) -> str:
        """Process user feedback about knowledge assessment"""
        last_message = self.state["messages"][-1]
        user_feedback = last_message.content.strip()
        
        print("\nü§î –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å...")
        
        # Prevent infinite loops
        if self.state["knowledge_modification_count"] >= 3:
            self.state["knowledge_approved"] = True
            return "–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó."
        
        try:
            # Analyze user intent
            intent = self._analyze_knowledge_intent(user_feedback)
            
            if intent == "AGREE":
                self.current_step_index += 1
                self.state["knowledge_approved"] = True
                return self._generate_recommendation()
                
            elif intent == "ADD_KNOWLEDGE":
                return self._handle_add_knowledge(user_feedback)
                
            elif intent == "REMOVE_KNOWLEDGE":
                return self._handle_remove_knowledge(user_feedback)
                
            elif intent == "CORRECT_KNOWLEDGE":
                return self._handle_correct_knowledge(user_feedback)
                
            elif intent == "REWRITE_KNOWLEDGE":
                return self._handle_rewrite_knowledge()
                
            elif intent == "REGENERATE_KNOWLEDGE":
                return self._handle_regenerate_knowledge()
                
            else:
                return self._handle_unclear_knowledge_feedback()
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–≥—É–∫—É: {e}")
            return "–í–∏–±–∞—á—Ç–µ, –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –≤—ñ–¥–≥—É–∫. –ß–∏ –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ –æ—Ü—ñ–Ω—Ü—ñ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó?"

    def _analyze_knowledge_intent(self, user_feedback: str) -> str:
        """Analyze what user wants to do with knowledge assessment"""
        intent_prompt = f"""
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–∞–≤ –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: "{user_feedback}"
        
        –í–∏–∑–Ω–∞—á –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        - AGREE: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≥–æ–¥–µ–Ω –∑ –æ—Ü—ñ–Ω–∫–æ—é (—Ç–∞–∫, –∑–≥–æ–¥–µ–Ω, –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ—á–Ω–æ, etc.)
        - ADD_KNOWLEDGE: —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —â–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—è —â–µ –∑–Ω–∞—î (—Ç–∞–∫–æ–∂ –∑–Ω–∞—é—Ç—å, —â–µ —î, –¥–æ–¥–∞—Ç–∏, etc.)
        - REMOVE_KNOWLEDGE: –≤–≤–∞–∂–∞—î —â–æ —â–æ—Å—å –∑–∞–π–≤–µ (–Ω–µ –∑–Ω–∞—é—Ç—å, –ø—Ä–∏–±—Ä–∞—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏, etc.)
        - CORRECT_KNOWLEDGE: —Ö–æ—á–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—ñ (–Ω–µ —Ç–∞–∫, –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ, –≤–∏–ø—Ä–∞–≤–∏—Ç–∏, etc.)
        - REWRITE_KNOWLEDGE: —Ö–æ—á–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É —Å–∞–º (—Å–∞–º –Ω–∞–ø–∏—à—É, –ø–æ-—Å–≤–æ—î–º—É, —ñ–Ω–∞–∫—à–µ, etc.)
        - REGENERATE_KNOWLEDGE: —Ö–æ—á–µ —â–æ–± –∞–≥–µ–Ω—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞–≤ (–∑–∞–Ω–æ–≤–æ, –ø–æ-–Ω–æ–≤–æ–º—É, —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, etc.)
        - UNCLEAR: –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π –≤—ñ–¥–≥—É–∫
        
        –í—ñ–¥–ø–æ–≤—ñ–¥—å –ª–∏—à–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: AGREE, ADD_KNOWLEDGE, REMOVE_KNOWLEDGE, CORRECT_KNOWLEDGE, REWRITE_KNOWLEDGE, REGENERATE_KNOWLEDGE, –∞–±–æ UNCLEAR
        """
        
        response = self.llm.invoke([HumanMessage(content=intent_prompt)])
        return response.content.strip().upper()

    def _handle_add_knowledge(self, user_feedback: str) -> str:
        """Handle adding knowledge information"""
        self.state["knowledge_modification_count"] += 1
        
        current_assessment = self.state["knowledge_assessment"].get("content", "")
        
        update_prompt = f"""
        –ü–æ—Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {current_assessment}
        
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–Ω–∞–Ω–Ω—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {user_feedback}
        
        –û–Ω–æ–≤—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å, –≤–∫–ª—é—á–∏–≤—à–∏ –Ω–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Å—Ç–∏–ª—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=update_prompt)])
        updated_assessment = response.content
        
        self.state["knowledge_assessment"]["content"] = updated_assessment
        
        return f"""
    –û–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {updated_assessment}

    –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —â–µ —è–∫—ñ—Å—å –∑–º—ñ–Ω–∏ –≤ –æ—Ü—ñ–Ω—Ü—ñ –∑–Ω–∞–Ω—å?
        """.strip()

    def _handle_remove_knowledge(self, user_feedback: str) -> str:
        """Handle removing knowledge information"""
        self.state["knowledge_modification_count"] += 1
        
        current_assessment = self.state["knowledge_assessment"].get("content", "")
        
        remove_prompt = f"""
        –ü–æ—Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {current_assessment}
        
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–∞–∂–∞—î —â–æ —Ç—Ä–µ–±–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏/–≤–∏–ø—Ä–∞–≤–∏—Ç–∏: {user_feedback}
        
        –û–Ω–æ–≤—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å, –≤–∏–¥–∞–ª–∏–≤—à–∏ –∞–±–æ –≤–∏–ø—Ä–∞–≤–∏–≤—à–∏ –∑–∞–∑–Ω–∞—á–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
        –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Å—Ç–∏–ª—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=remove_prompt)])
        updated_assessment = response.content
        
        self.state["knowledge_assessment"]["content"] = updated_assessment
        
        return f"""
    –û–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {updated_assessment}

    –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —â–µ —è–∫—ñ—Å—å –∑–º—ñ–Ω–∏ –≤ –æ—Ü—ñ–Ω—Ü—ñ –∑–Ω–∞–Ω—å?
        """.strip()

    def _handle_correct_knowledge(self, user_feedback: str) -> str:
        """Handle correcting knowledge assessment"""
        self.state["knowledge_modification_count"] += 1
        
        current_assessment = self.state["knowledge_assessment"].get("content", "")
        
        correct_prompt = f"""
        –ü–æ—Ç–æ—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: {current_assessment}
        
        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏/—É—Ç–æ—á–Ω–∏—Ç–∏: {user_feedback}
        
        –í–∏–ø—Ä–∞–≤—Ç–µ –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞—É–≤–∞–∂–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ —Å—Ç–∏–ª—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=correct_prompt)])
        updated_assessment = response.content
        
        self.state["knowledge_assessment"]["content"] = updated_assessment
        
        return f"""
    –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {updated_assessment}

    –¢–µ–ø–µ—Ä –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?
        """.strip()

    def _handle_rewrite_knowledge(self) -> str:
        """Handle user wanting to write knowledge assessment themselves"""
        self.state["knowledge_modification_count"] += 1
        
        return """
    –ó—Ä–æ–∑—É–º—ñ–ª–æ! –û–ø–∏—à—ñ—Ç—å —â–æ –≤–∞—à–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –≤–∂–µ –∑–Ω–∞—î –ø—Ä–æ —Ç–µ–º—É –≤–∏—Å—Ç—É–ø—É, –∞ —â–æ —ó–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è.
    –í–∫–ª—é—á—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏, –¥–æ—Å–≤—ñ–¥, –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞–Ω–Ω—è —Ç–æ—â–æ.
        """.strip()

    def _handle_regenerate_knowledge(self) -> str:
        """Handle regenerating knowledge assessment"""
        self.state["knowledge_modification_count"] += 1
        
        print("\nüîÑ –ì–µ–Ω–µ—Ä—É—é –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó...")
        
        speaker_info = self.state.get("speaker_info", {})
        audience_analysis = self.state.get("audience_analysis", {})
        
        regenerate_prompt = f"""
        –°—Ç–≤–æ—Ä—ñ—Ç—å –ù–û–í–£ –æ—Ü—ñ–Ω–∫—É –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –¥–ª—è –≤–∏—Å—Ç—É–ø—É:
        
        –¢–µ–º–∞ –≤–∏—Å—Ç—É–ø—É: {speaker_info.get('topic', '–ù–µ–≤—ñ–¥–æ–º–∞')}
        –ú–µ—Ç–∞ —Å–ø—ñ–∫–µ—Ä–∞: {speaker_info.get('goal', '–ù–µ–≤—ñ–¥–æ–º–∞')}
        –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {audience_analysis.get('segments', '')}
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –æ—Ü—ñ–Ω–∫–∏ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó.
        –†–æ–∑–≥–ª—è–Ω—å—Ç–µ —Ä—ñ–∑–Ω—ñ –∞—Å–ø–µ–∫—Ç–∏: —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –∑–Ω–∞–Ω–Ω—è, –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–π –¥–æ—Å–≤—ñ–¥, –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–µ–Ω–¥–∏, etc.
        –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
        """
        
        response = self.llm.invoke([HumanMessage(content=regenerate_prompt)])
        new_assessment = response.content
        
        self.state["knowledge_assessment"]["content"] = new_assessment
        
        return f"""
    –ù–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞ –∑–Ω–∞–Ω—å –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:

    {new_assessment}

    –ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Ç–∞–∫–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –æ—Ü—ñ–Ω–∫–∏?
        """.strip()

    def _handle_unclear_knowledge_feedback(self) -> str:
        """Handle unclear user feedback about knowledge"""
        return """
    –ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ –æ—Ü—ñ–Ω—Ü—ñ –∑–Ω–∞–Ω—å. –í–∏ –º–æ–∂–µ—Ç–µ:

    ‚Ä¢ –î–æ–¥–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è: "–∞—É–¥–∏—Ç–æ—Ä—ñ—è —Ç–∞–∫–æ–∂ –∑–Ω–∞—î –ø—Ä–æ..."
    ‚Ä¢ –ü—Ä–∏–±—Ä–∞—Ç–∏ —â–æ—Å—å: "–≤–æ–Ω–∏ –Ω–µ –∑–Ω–∞—é—Ç—å –ø—Ä–æ..."  
    ‚Ä¢ –í–∏–ø—Ä–∞–≤–∏—Ç–∏: "–Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –≤–æ–Ω–∏ –∑–Ω–∞—é—Ç—å..."
    ‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∞–º–æ–º—É: "—è —Å–∞–º –æ–ø–∏—à—É —ó—Ö –∑–Ω–∞–Ω–Ω—è"
    ‚Ä¢ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏: "–∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç"
    ‚Ä¢ –ü–æ–≥–æ–¥–∏—Ç–∏—Å—è: "–∑–≥–æ–¥–µ–Ω, –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"

    –©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑ –æ—Ü—ñ–Ω–∫–æ—é –∑–Ω–∞–Ω—å?
        """.strip()

    
    def _generate_recommendation(self) -> str:
        """Generate final recommendation for the speaker"""
        speaker_info = self.state.get("speaker_info", {})
        
        print("\nüí° –ì–µ–Ω–µ—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó...")
        
        try:
            # Generate main message recommendation
            recommendation_prompt = f"""
            –°–ø—ñ–∫–µ—Ä –≤–∏—Å—Ç—É–ø–∞—î –Ω–∞ —Ç–µ–º—É: {speaker_info.get('topic')}
            –ô–æ–≥–æ –º–µ—Ç–∞: {speaker_info.get('goal')}
            
            –°—Ñ–æ—Ä–º—É–ª—é–π –∫–ª—é—á–æ–≤—É –¥—É–º–∫—É, —è–∫—É –∞—É–¥–∏—Ç–æ—Ä—ñ—è –º–∞—î –≤–∏–Ω–µ—Å—Ç–∏ –∑ –≤–∏—Å—Ç—É–ø—É –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–µ—Ç–∏ —Å–ø—ñ–∫–µ—Ä–∞.
            –í–∫–ª—é—á–∏ –µ–ª–µ–º–µ–Ω—Ç–∏: —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ—Å—Ç—å, –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å, –ø—Ä–∏–Ω–∞–ª–µ–∂–Ω—ñ—Å—Ç—å, —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—å.
            –í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
            """
            
            response = self.llm.invoke([HumanMessage(content=recommendation_prompt)])
            
            self.state["final_recommendation"] = response.content
            self.state["analysis_complete"] = True
            
            final_message = f"""
–î–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–≤–æ—î—ó —Ü—ñ–ª—ñ, —è –≤–≤–∞–∂–∞—é, —â–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –º–∞—î –≤–∏–Ω–µ—Å—Ç–∏ –∑ –≤–∏—Å—Ç—É–ø—É –Ω–∞—Å—Ç—É–ø–Ω—É –æ—Å–Ω–æ–≤–Ω—É –¥—É–º–∫—É:

"{response.content}"

–ó–≥–æ–¥–µ–Ω?
            """
            
            return final_message.strip()
            
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}"
    
    def _display_agent_message(self, message: str):
        """Display agent message with nice formatting"""
        print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {message}")
    
    def _show_help(self):
        """Show help information"""
        help_text = """
üìã –ö–æ–º–∞–Ω–¥–∏:
‚Ä¢ help/–¥–æ–ø–æ–º–æ–≥–∞ - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é
‚Ä¢ quit/exit/–≤–∏—Ö—ñ–¥/—Å—Ç–æ–ø - –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É

‚ÑπÔ∏è  –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –≤–∏—Å—Ç—É–ø—É:
1. –ó'—è—Å—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó
2. –í–∏–∑–Ω–∞—á–∏–º–æ —Ç–≤–æ—é –º–µ—Ç—É
3. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—é
4. –î–∞–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
        """
        print(help_text)
    
    def _show_summary(self):
        """Show conversation summary"""
        print("\n" + "="*50)
        print("üìä –ü–Ü–î–°–£–ú–û–ö –ê–ù–ê–õ–Ü–ó–£")
        print("="*50)
        
        event_info = self.state.get("event_info", {})
        speaker_info = self.state.get("speaker_info", {})
        audience_analysis = self.state.get("audience_analysis", {})
        
        print(f"üéØ –ü–æ–¥—ñ—è: {event_info.get('event_name', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
        print(f"üìÖ –î–∞—Ç–∞: {event_info.get('dates', '–£—Ç–æ—á–Ω—é—î—Ç—å—Å—è')}")
        print(f"üìù –¢–µ–º–∞: {speaker_info.get('topic', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
        print(f"üéØ –ú–µ—Ç–∞: {speaker_info.get('goal', '–ù–µ–≤—ñ–¥–æ–º–∞')}")
        print(f"üë• –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {len(audience_analysis.get('segments', ''))} —Å–∏–º–≤–æ–ª—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {self.state.get('final_recommendation', '–í—ñ–¥—Å—É—Ç–Ω—è')[:100]}...")
        
        print("\n‚ú® –£—Å–ø—ñ—Ö—ñ–≤ –∑ –≤–∏—Å—Ç—É–ø–æ–º!")
    
    def get_current_state(self):
        """Get current conversation state"""
        return self.state.copy()
    
    def reset_conversation(self):
        """Reset conversation to start over"""
        self.state = self._initialize_state()
        self.current_step_index = 0
        print("\nüîÑ –†–æ–∑–º–æ–≤—É —Å–∫–∏–Ω—É—Ç–æ. –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É!")

# Usage example and main interface
def main():
    """Main function to run the interactive agent"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –≤–∏—Å—Ç—É–ø—É")
    
    try:
        agent = InteractiveSpeakerPrepAgent()
        agent.start_conversation()
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤ (GOOGLE_API_KEY, TAVILY_API_KEY) —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.")

if __name__ == "__main__":
    main()
# src/steps/search_event.py
from src.steps.base_step import ConversationStep
from src.state import AgentState
from src.services.llm_service import LanguageModelService
from src.services.search_service import SearchService
from langchain_core.utils.json import parse_json_markdown
import json
from datetime import datetime

class SearchEventStep(ConversationStep):
    """
    Searches for event information, extracts structured data into the state,
    and formulates a friendly response to the user.
    """
    def execute(self, state: AgentState, llm_service: LanguageModelService, search_service: SearchService) -> tuple[AgentState, str]:
        state["current_step_name"] = "search_event"
        event_name = state["messages"][-1].content

        current_year = datetime.now().year
        next_year = current_year + 1
        
        print(f"\nüîç –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ '{event_name}' –Ω–∞ {current_year}/{next_year} —Ä—ñ–∫...")
        
        search_query = f"{event_name} conference {current_year} or {next_year} details agenda speakers"
        search_results = search_service.run(search_query)

        json_extraction_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –ø—Ä–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—é '{event_name}'.
        –í–∏—Ç—è–≥–Ω–∏ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ —ó—ó **–≤–∏–∫–ª—é—á–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON** —É Markdown-–±–ª–æ—Ü—ñ.

        –ö–ª—é—á—ñ –¥–ª—è JSON:
        - "event_name": —Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ –ø–æ–¥—ñ—ó
        - "dates": –¥–∞—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
        - "place": –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –∫—Ä–∞—ó–Ω–∞, –∞–±–æ "online")
        - "theme": –æ—Å–Ω–æ–≤–Ω–∞ —Ç–µ–º–∞—Ç–∏–∫–∞ –∞–±–æ —Å–ª–æ–≥–∞–Ω –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó
        - "attendees": –æ—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ)
        - "stages": —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ —Å—Ç–µ–π–¥–∂—ñ–≤/—Å–µ–∫—Ü—ñ–π (—è–∫—â–æ —î)
        - "target_audience": –æ–ø–∏—Å —Ü—ñ–ª—å–æ–≤–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó

        –Ø–∫—â–æ –¥–ª—è —è–∫–æ–≥–æ—Å—å –∫–ª—é—á–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∑–Ω–∞—á–µ–Ω–Ω—è `null`.

        –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:
        ---
        {search_results}
        ---
        """

        json_response = llm_service.invoke(json_extraction_prompt)
        
        try:
            extracted_data = parse_json_markdown(json_response)
            state["event_info"] = extracted_data
        except (json.JSONDecodeError, TypeError, ValueError) as e:
            print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON, –∑–±–µ—Ä—ñ–≥–∞—é –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ü–æ–º–∏–ª–∫–∞: {e}")
            state["event_info"] = {"event_name": event_name}

        conversational_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–¥—ñ—é, —Å—Ñ–æ—Ä–º—É–ª—é–π –∫–æ—Ä–æ—Ç–∫–µ, –¥—Ä—É–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–ø—ñ–∫–µ—Ä–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

        –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥—ñ—é:
        {json.dumps(state["event_info"], indent=2, ensure_ascii=False)}

        –£ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ:
        1. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏, —â–æ —Ç–∏ –∑–Ω–∞–π—à–æ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
        2. –ó–≥–∞–¥–∞–π 2-3 –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –¥–µ—Ç–∞–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞–∑–≤—É, —Ç–µ–º–∞—Ç–∏–∫—É, –º—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è). –ù–µ –∑–≥–∞–¥—É–π –ø–æ–ª—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º `null`.
        3. –ó–∞–≤–µ—Ä—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏—Ä–æ–¥–Ω–∏–º —Ç–∞ –¥—Ä—É–∂–Ω—ñ–º –ø–∏—Ç–∞–Ω–Ω—è–º –ø—Ä–æ —Ç–µ, –Ω–∞ —è–∫—É —Ç–µ–º—É –±—É–¥–µ –≤–∏—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """

        response_message = llm_service.invoke(conversational_prompt)

        return state, response_message